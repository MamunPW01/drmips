# English default translation
ok=OK
cancel=Cancel
yes=&Yes
no=&No
close=&Close
loading=Loading...
look_in=Look In
save_in=Save In
open_selected_file=Open selected file
open_selected_directory=Open selected directory
save_selected_file=Save selected file
files_of_type=Files of Type
file_name=File Name
all_files=All Files
up_one_level=Up One Level
home=Home
new_folder=New Folder
create_new_folder=Create New Folder
list=List
details=Details
name=Name
size=Size
date=Modified
refresh=Refresh
view=View
file=&File
new=&New
open=&Open...
open_recent=Open &recent
save=&Save
save_as=S&ave as...
print=&Print...
exit=E&xit
edit=&Edit
undo=&Undo
redo=&Redo
cut=&Cut
copy=C&opy
paste=&Paste
select_all=Select &all
find_replace=&Find/replace...
view=&View
performance_mode=Performance &mode
control_path=&Control path
arrows_in_wires=&Arrows in wires
overlayed_data=Overlayed &data
internal_windows=&Internal windows
dark_theme=Dark &theme
language=&Language
execute=E&xecute
assemble=&Assemble
restart=&Restart
back_step=&Back step
step=&Step
run=R&un
reset_data_before_assembling=Reset &data before assembling
cpu=&CPU
load=&Load...
load_recent=Load &recent
help=&Help
about=&About...
load_cpu_from_file=Load CPU from file
cpu_files=CPU files (*.cpu)
assembly_files=Assembly code files (*.asm; *.s)
confirm_replace=The file #1 already exists. Do you want to replace it?
code_changed=The code has been changed. Do you want to save it?
code=Code
registers=Registers
register=Register
value=Value
format=Format
data_format=Data Format
binary=Binary
decimal=Decimal
hexadecimal=Hexadecimal
datapath=&Datapath
inputs=Inputs
outputs=Outputs
synchronous=Synchronous
edit_value=Edit #1
assembled_code=Assembled code
assembled=Assembled
address=Address
type_x=#1-type
latency=Latency
latency_of_x=Latency of #1:
instruction=Instruction
pseudo_instruction=Pseudo-instruction
arguments=Arguments
integer=Integer
label=Label
offset=Offset
data=Data
target=Target
ex=ex
usage=Usage
operation=Operation
results_in=Results in
directive=Directive
data_directive=Data directive
description=Description
data_directive_description=Marks the start of the data segment. Following lines will be interpreted and then stored in the data memory.
text_directive_description=Marks the start of the text segment. Following lines will be assembled and then stored in the instruction memory.
word_directive_description=Stores the listed value(s) as words (32 bits).
space_directive_description=Reserves the specified number of bytes in the data memory.
page=Page
label_in_code=A label in the code.
switch_side=&Switch side
double_click_to_change=double-click to change
reading_from_reg=Reading from this register
writing_to_reg=Writing to this register
reading_and_writing_to_reg=Reading and writing to this register
reading_from_mem=Reading from this memory position
writing_to_mem=Writing to this memory position
reading_and_writing_to_mem=Reading and writing to this memory position
data_mode=Data mode
normal_wire=Normal wire
wire_in_critical_path=Wire in critical path
control_path_wire=Control path wire
relevant_control_path_wire=Relevant control path wire
irrelevant_wire=Irrelevant wire
advised_to_display_control_path=It is advised to display the control path.
pc=Program Counter
pc_description=Contains the address of the instruction being executed.\nThe address is updated when the clock transition occurs.
regbank=Register bank
regbank_description=Holds the 32 MIPS registers and provides read/write to them.\nThe WriteReg register is updated on the clock transition if RegWrite is enabled.
instruction_memory=Instruction memory
instruction_memory_description=Contains the assembled code.
control_unit=Control unit
control_unit_description=Decodes the opcode of the instruction to generate the various control signals accordingly.
add=Adder
add_description=Adds the values of the inputs.
not=NOT port
not_description=Inverts the value of the input.
and=AND port
and_description=Executes a logical AND on the inputs.
or=OR port
or_description=Executes a logical OR on the inputs.
xor=XOR port
xor_description=Executes a logical XOR on the inputs.
distributor=Distributor
distributor_description=Distributes the input's bits through the various outputs.
multiplexer=Multiplexer
multiplexer_description=Choses an input value according to the selector value.
constant=Constant
constant_description=A constant value.
sign_extend=Sign extend
sign_extend_description=Extends the value of the input with its sign.
zero_extend=Zero extend
zero_extend_description=Extends the value of the input with zeros.
shift_left=Shift left
shift_left_description=Shifts the input's bits some positions to the left.
fork=Fork
fork_description=Forks a wire to connect it to multiple components.
concatenator=Concatenator
concatenator_description=Concatenates the values of the two inputs.
alu_control=ALU controller
alu_control_description=Uses the values of its two inputs to decide the ALU operation.
alu=Arithmetic and Logic Unit
alu_description=Performs arithmetic operations.
extended_alu=Arithmetic and Logic Unit (extended)
extended_alu_description=Performs arithmetic operations.\nThis ALU supports multiplications and divisions, and stores the HI and LO "registers".
data_memory=Data memory
data_memory_description=RAM memory with several positions to temporarily save and load data.
pipeline_register=Pipeline register
pipeline_register_description=Separates two pipeline stages.
forwarding_unit=Forwarding unit
forwarding_unit_description=Solves some data hazards by forwarding results from the MEM and WB stages back.
hazard_detection_unit=Hazard detection unit
hazard_detection_unit_description=Detects when a stall should occur because of a load followed by an instruction that uses the loaded value.
about_program=About #1
by_author=Created by: #1
external_resources=External resources
for_dissertation=for the Master's Dissertation of MIEIC
find=&Find
replace=&Replace
replace_all=Replace &all
match_case=Match case
backwards=Search backwards
error_opening_file=Error opening file #1!
error_saving_file=Error saving file #1!
error_printing_file=Error printing file!
invalid_file=Invalid file!
invalid_value=Invalid value!
line=Line #1
unknown_instruction=Unknown instruction "#1"!
wrong_no_args=Wrong number of arguments! Expected #1, found #2.
invalid_arg_int=Invalid argument! Expected an integer, found #1.
invalid_arg_reg=Invalid argument! Expected a register, found #1.
invalid_arg_data=Invalid argument! Expected "address" or "base($offset)", found "#1".
invalid_label=Invalid label "#1"!
duplicated_label=Duplicated label "#1"!
unknown_label=Unknown label "#1"!
unknown_data_directive=Unknown data type directive "#1"!
invalid_arg_positive_int=Invalid argument! Expected a positive integer, found #1.
data_segment_without_data_memory=Data segment not available when using a CPU without data memory!
possible_infinite_loop=Possible infinite loop detected (more than #1 cycles executed)!
license=License
documentation=&Documentation
error_opening_doc_folder=Error opening documentation folder!
remove_latencies=&Remove latencies
restore_latencies=Restore &latencies
go_home=Home
go_up=Up One Level
supported_instructions=&Supported instructions...
instructions_supported_by_cpu=Instructions supported by the CPU
instructions=Instructions
pseudo_instructions=Pseudo-instructions
directives=Directives
